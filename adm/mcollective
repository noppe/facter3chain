#!/bin/sh
#
# /opt/aiaiao/etc/init.d/mcollective
#
#   2018-07-07 noppe
#     * Changed to AIO package with fixes
#

# Check if we're on 10; therefore SMF
if [ -x /usr/sbin/svcadm ]; then
    . /lib/svc/share/smf_include.sh
fi

prefix="/opt/aiaiao"
exec_prefix="/opt/aiaiao"
sysconfdir="/etc/opt/csw"
bindir="/opt/aiaiao/bin"
sbindir="/opt/aiaiao/sbin"
localstatedir="/var/opt/csw"
pidfile=/var/aiaiao/puppet/mcollective.pid
mcollectived=/opt/aiaiao/sbin/mcollectived

getprop() {
    val=`/usr/bin/svcprop -p $1 $SMF_FMRI`
    [ -n "$val" ] && echo $val
}

start_mcollective() {
    cd /
    #confdir=`getprop puppet/confdir`
    #vardir=`getprop puppet/vardir`
    #ssldir=`getprop puppet/ssldir`
    
    # Start daemons.
    ${mcollectived} --pid=${pidfile} --config="/etc/puppetlabs/mcollective/server.cfg" --daemonize
}

reload_mcollective() {
    if [ -r $pidfile ]; then
        kill -HUP `cat $pidfile`
    fi
}

stop_mcollective() {
    if [ -r $pidfile ]; then
        pid=`cat $pidfile`
        kill $pid
    fi
}

get_current_pid() {
    if [ -x /usr/bin/zonename ]; then
        zone=`/usr/bin/zonename`
        zoneopts="-z $zone"
    else
        zoneopts=""
    fi
    pgrep -f $zoneopts 'mcollectived'
}

# Returns a line with certain string from a config file.
get_line_with() {
    __s="$1"
    __f="$2"
    cat "${__f}" \
        | sed -e 's/^ *//' \
        | grep -v '^#' \
        | grep "${__s}"
}


case "$1" in
    start)
        printf "Starting mcollective client services:"
        start_mcollective
        printf " mcollective"
        echo ""
        ;;
    stop)
        printf "Stopping mcollective client services:"
        stop_mcollective
        printf " mcollective"
        echo ""
        ;;
    restart)
        printf "Restarting mcollective client services:"
        stop_mcollective
        start_mcollective
        printf " mcollective"
        echo ""
        ;;
    reload)
        printf "Reloading mcollective client services:"
        reload_mcollective
        printf " mcollective"
        echo ""
        ;;
    status)
        if [ -f $pidfile ]; then
            pid=`cat $pidfile`
            curpid=`get_current_pid`
            if [ "$pid" -eq "$curpid" ]; then
                exit 0
            else
                exit 1
            fi
        else
            exit 1
        fi
        ;;
esac
exit 0


